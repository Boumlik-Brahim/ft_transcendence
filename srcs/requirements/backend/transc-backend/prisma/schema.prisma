// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//* ---------------------------------------------------------------------------------------------------------------------------- *//

enum FriendShipStatus {
  PENDING
  ACCEPTED
}

enum Status {
  ONLINE
  OFFLINE
  INAGAME
}

enum ChannelType {
  PUBLIC
  PROTECTED
  PRIVATE
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  MUTED_MEMBER
  BANNED_MEMBER
}

enum GameInvitationState {
  PENDING
  ACCEPTED
  REJECTED
  CANCELED
}

//* ---------------------------------------------------------------------------------------------------------------------------- *//

model User {
  id  String @id @default(uuid())
  name  String? @unique
  email String @unique
  intraId String @unique
  Avatar  String?
  status  Status @default(ONLINE)
  isAuth  Boolean @default(true)
  twoFactorAuthSecret String?
  isTwoFactorEnabled Boolean @default(false)
  userStat  UserStat[]
  achievement Achievement[]
  userThatBlock BlockedUser[] @relation("Bloking")
  blockedUser   BlockedUser[] @relation("blocked")
  user    Friend[]  @relation("user")
  sender GamesInvitation[] @relation("sender")
  receiver GamesInvitation[] @relation("receiver")
  friend  Friend[]  @relation("friend")
  playerA GamesHistories[] @relation("playerA")
  playerB GamesHistories[] @relation("playerB")
  senders  DirectMessage[] @relation("sendeMessage")
  receivers DirectMessage[] @relation("receiveMessage")
  channelOwner Channel[] @relation("channelOwner")
  channelMember ChannelMember[] @relation("channelMember")
  kickedMember KickedMember[] @relation("kickedMember")
  channelMessage ChannelMessage[] @relation("sendChannelMessage")
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model UserStat {
  id  String @id @default(uuid())
  winsNumbr  Int
  lossesNumbr  Int
  rate  Int
  user  User  @relation(fields: [userId], references: [id])
  userId  String @unique
  created_at  DateTime  @default(now())
}

model Achievement {
  id  String @id @default(uuid())
  achievement String[]
  user  User @relation(fields: [userId], references: [id])
  userId  String @unique
  created_at  DateTime  @default(now())
}

model BlockedUser {
  id  String @id @default(uuid())
  userThatBlock User @relation("Bloking", fields: [userId], references: [id])
  userId  String
  blockedUser User  @relation("blocked", fields: [blockedUserId], references: [id])
  blockedUserId String
  created_at  DateTime  @default(now())
}

model Friend {
  id  String @id @default(uuid())
  friendShipStatus FriendShipStatus
  user  User  @relation("user", fields: [userId], references: [id])
  userId  String
  friend  User  @relation("friend", fields: [friendId], references: [id])
  friendId  String
  created_at  DateTime  @default(now())
  @@unique([userId, friendId], name: "userAndFriend")
}


model DirectMessage {
  id  String @id @default(uuid())
  content String
  sender  User  @relation("sendeMessage", fields: [senderId], references: [id])
  senderId String
  reciever  User  @relation("receiveMessage", fields: [recieverId], references: [id])
  recieverId  String
  roomId  String
  seen Boolean @default(false)
  created_at  DateTime  @default(now())
}

//* ---------------------------------------------------------------------------------------------------------------------------- *//

model Channel {
  id  String @id @default(uuid())
  channelName String @unique
  channelType ChannelType @default(PUBLIC)
  channelPassword String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user  User @relation("channelOwner", fields: [channelOwnerId], references: [id])
  channelOwnerId  String
  channelMember ChannelMember[] @relation("channelMember")
  kickedMember  KickedMember[]  @relation("kickedMember")
  recievers  ChannelMessage[]  @relation("receiverRelation")
}

model ChannelMember {
  id  String @id @default(uuid())
  user  User @relation("channelMember", fields: [userId], references: [id])
  userId  String
  channel Channel @relation("channelMember", fields: [channelId], references: [id])
  channelId String
  role Role @default(MEMBER)
  bannedTime DateTime?
  unbanneTime DateTime?
  mutedTime DateTime?
  unmuteTime DateTime?
  created_at  DateTime  @default(now())
  @@unique([userId, channelId], name: "userAndChannel")
}

model KickedMember {
  id  String @id @default(uuid())
  user  User @relation("kickedMember", fields: [userId], references: [id])
  userId  String
  channel Channel @relation("kickedMember", fields: [channelId], references: [id])
  channelId String
  created_at  DateTime  @default(now())
  @@unique([userId, channelId], name: "kickedMemberAndChannel")
}

model ChannelMessage {
  id  String @id @default(uuid())
  content String
  sender  User @relation("sendChannelMessage", fields: [userId], references: [id])
  userId  String
  recievers  Channel @relation("receiverRelation", fields: [channelId], references: [id])
  channelId String
  created_at  DateTime  @default(now())
}

//* ---------------------------------------------------------------------------------------------------------------------------- *//

model GamesInvitation {
  id  String @id @default(uuid())
  status GameInvitationState
  sender  User  @relation("sender", fields: [senderId], references: [id])
  senderId  String
  receiver  User  @relation("receiver", fields: [receiverId], references: [id])
  receiverId  String
  created_at  DateTime  @default(now())
  gameId String @unique
}

model GamesHistories {
  id  String @id @default(uuid())
  playerA_Score Int
  playerB_Score Int
  created_at  DateTime  @default(now())
  playerA User @relation("playerA", fields: [playerA_id], references : [id])
  playerA_id String
  playerB User @relation("playerB", fields: [playerB_id], references : [id])
  playerB_id String
}

//* ---------------------------------------------------------------------------------------------------------------------------- *//